{"version":3,"sources":["pages/Blog.js","pages/Home.js","components/GlobalStyles.js","context/ThemeContext.js","hooks/index.js","components/Navigation.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["Blog","match","history","HomeWrapper","styled","div","theme","sizes","navbar","height","TextWrapper","HomeContainer","colors","container","SocialLinks","ul","props","mediaqueries","lg","socialLinks","name","url","icon","mdiGithub","mdiLinkedin","mdiTwitter","mdiInstagram","mdiGmail","Home","useWindowSize","width","className","ratio","style","maxWidth","photoId","expand","map","key","href","target","path","title","size","color","GlobalStyles","useTheme","styles","css","background","text","ThemeContext","createContext","setTheme","useDarkModeEnable","useState","state","stateSet","handler","window","matchMedia","matches","useEffect","addEventListener","NavigationWrapper","nav","mapThemeKeyToIcon","mdiAuto","mdiLight","mdiDark","mapThemeKeyToText","ThemeButtonWrapper","button","Navigation","useContext","enabled","isHome","useRouteMatch","exact","top","bottomBoundary","innerZ","c","to","filter","e","themeKey","onClick","mapValues","xs","sm","md","bp","base","primary","light","produce","draft","dark","getTheme","themes","App","useLocalStorage","themeKeySet","systemTheme","Provider","value","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dda6124b.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Blog = ({ match, history }) => {\n  return (\n    <>\n      Under contruction <br />\n      {/* <div>\n          <Link to={`${match.url}/invoices`}>Invoices</Link>\n          <Link to={`${match.url}/team`}>Team</Link>\n        </div> */}\n      {/* <div>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/about\">About</Link>\n          <Link to=\"/support\">Support</Link>\n          <button onClick={history.goBack}>Go Back</button>\n        </div> */}\n    </>\n  );\n}\n\nexport default Blog;","import React from \"react\";\nimport AspectRatio from \"react-aspect-ratio\";\nimport { useWindowSize } from \"react-use\";\nimport Unsplash from 'react-unsplash-wrapper'\nimport styled from \"@emotion/styled\";\nimport Icon from '@mdi/react'\nimport { mdiGithub, mdiLinkedin, mdiTwitter, mdiInstagram, mdiGmail } from '@mdi/js'\n\n\n\nconst HomeWrapper = styled.div`\n    .hero {\n        position: relative;\n        margin-top: -${({ theme }) => theme.sizes.navbar.height};\n    }\n\n    .hero-ratio > div::before {\n        background: linear-gradient( rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5) );\n        content: \"\";\n        height: 100%;\n        position: relative;\n        width: 100%;\n    }\n\n`;\n\nconst TextWrapper = styled.div`\n    align-items: center;\n    box-sizing: border-box;\n    color: white;\n    display: flex;\n    font-size: 3rem;\n    height: 100%;\n    justify-content: center;\n    padding: 0 1rem;\n    position: absolute;\n    text-align: center;\n    text-shadow: -3px 1px 2px rgba(0, 0, 0, 1);\n    width: 100%;\n`;\n\nconst HomeContainer = styled.div`\n    // background: ${({ theme }) => theme.colors.container};\n    min-height: 300px;\n    // margin-top: -100px;\n    position: relative;\n    padding: 1rem;\n    border-radius: .5rem .5rem 0 0;\n    `;\n\nconst SocialLinks = styled.ul`\n    align-items: center;\n    bottom: 0;\n    display: flex;\n    justify-content: center;\n    padding: 0;\n    position: absolute;\n\n    & > li {\n        display: inline-block;\n        margin: 0 0.5rem;\n    }\n\n    .social-icon {\n\n        path {\n            fill: white;\n            opacity: 1;\n            transition: opacity .5s;\n\n            ${props => props.theme.mediaqueries.lg} {\n                opacity: 0.5;\n            }\n        }\n\n        &:hover, &:focus {\n            path {\n                opacity: 1;\n            }\n        }\n    }\n`;\n\nconst socialLinks = [\n    {\n        name: 'GitHub',\n        url: \"https://github.com/xantiagoma\",\n        icon: mdiGithub,\n    },\n    {\n        name: 'LinkedIn',\n        url: \"https://www.linkedin.com/in/xantiagoma\",\n        icon: mdiLinkedin,\n    },\n    {\n        name: 'Twitter',\n        url: \"https://twitter.com/xantiagoma\",\n        icon: mdiTwitter,\n    },\n    {\n        name: 'Instagram',\n        url: \"https://www.instagram.com/xantiagoma\",\n        icon: mdiInstagram,\n    },\n    {\n        name: 'Gmail',\n        url: \"mailto:xantiagoma@gmail.com\",\n        icon: mdiGmail,\n    },\n];\n\n\nconst Home = () => {\n    const { width, height } = useWindowSize();\n\n    return (<HomeWrapper>\n        <div className=\"hero\">\n            <AspectRatio\n                ratio={width / height}\n                style={{\n                    maxWidth: `${width}px`,\n                }}\n                className=\"hero-ratio\"\n            >\n                <Unsplash photoId=\"gy08FXeM2L4\" expand>\n                    <TextWrapper>Santiago Montoya Angarita</TextWrapper>\n                    <SocialLinks>\n                        {socialLinks.map(({ name, url, icon }) =>\n                            <li key={name}>\n                                <a href={url} target=\"_black\" className=\"social-icon\">\n                                    <Icon path={icon}\n                                        title={name}\n                                        size=\"25px\"\n                                        color=\"\"\n                                    />\n                                </a>\n                            </li>\n                        )}\n                    </SocialLinks>\n                </Unsplash>\n            </AspectRatio>\n        </div>\n        <HomeContainer className=\"container\">\n            <h2>About me</h2>\n        </HomeContainer>\n    </HomeWrapper>);\n}\n\nexport default Home;\n","import React from 'react';\nimport { useTheme } from 'emotion-theming';\nimport { css, Global } from '@emotion/core';\n\n\n\n\nconst globalStyles = props => css`\n  body {\n    background: ${props.theme.colors.background};\n    color:  ${props.theme.colors.text};\n  }\n\n  a {\n    color: inherit;\n    text-decoration: none;\n  }\n`;\n\nconst GlobalStyles = () => {\n  const theme = useTheme();\n  return <Global styles={globalStyles({ theme })} />;\n}\n\nexport default GlobalStyles;","import { createContext } from \"react\";\n\nconst ThemeContext = createContext({\n    theme: 'system',\n    setTheme: () => { },\n});\n\nexport default ThemeContext;","import { useState, useEffect } from 'react';\nimport { useWindowSize, useOrientation } from \"react-use\";\n\n\nexport function useDarkModeEnable() {\n    const [state, stateSet] = useState([false]);\n\n    const handler = () => {\n        if (window.matchMedia) {\n            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                return [true, 'dark'];\n            } else {\n                return [true, 'light'];\n            }\n        } else {\n            return [false];\n        }\n    }\n\n    useEffect(() => {\n        stateSet(handler());\n        window.matchMedia &&\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener &&\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => stateSet(handler()));\n    }, []);\n\n    return state;\n}\n\n\nexport function useScreenOrientation() {\n    const { type: orientation } = useOrientation();\n    const { width, height } = useWindowSize();\n    const orientationSupported = !!window.screen.orientation;\n    const calcOrientation = width > height ? 'landscape' : 'portrait';\n    return orientationSupported ? orientation : calcOrientation;\n}","import React, { useContext } from 'react';\nimport styled from '@emotion/styled';\nimport Sticky from 'react-stickynode';\nimport { ThemeContext } from \"../context\";\nimport { useDarkModeEnable } from '../hooks';\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport c from \"classnames\";\nimport Icon from '@mdi/react'\nimport { mdiBrightnessAuto as mdiAuto, mdiBrightness5 as mdiLight, mdiBrightness7 as mdiDark } from '@mdi/js'\n\n\nconst NavigationWrapper = styled.nav`\n    display: flex;\n    background: ${({ theme }) => theme.colors.navbar};\n    height: ${({ theme }) => theme.sizes.navbar.height};\n    transition: color 1s, background 1s;\n\n    &.hide-top {\n        background: transparent;\n        color: white;\n\n        .active & {\n            background: ${({ theme }) => theme.colors.navbar};\n            color: inherit;\n        }\n    }\n\n    .title {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 1rem;\n    }\n\n    h1 {\n        margin: 0\n    }\n\n    .urls {\n        display: block;\n        margin-right: auto;\n        padding: 0;\n\n        li {\n        display: inline-block;\n            a {\n                margin-right: 1rem;\n            }\n        }\n    }\n\n    .theme-switcher {\n        display: flex;\n        align-items: center;\n    }\n`;\n\nconst mapThemeKeyToIcon = {\n    'system': mdiAuto,\n    'light': mdiLight,\n    'dark': mdiDark\n}\n\nconst mapThemeKeyToText = {\n    'system': 'Auto',\n    'light': 'Light',\n    'dark': 'Dark'\n}\n\nconst ThemeButtonWrapper = styled.button`\n    margin: 0 0.5rem;\n    padding: 0;\n    background: transparent;\n    border: none;\n    outline: none;\n\n    .icon {\n        & > path {\n            fill: ${({ theme }) => theme.colors.text};\n        }\n\n        .hide-top & > path {\n            fill: white;\n        }\n\n        .active .hide-top & > path  {\n            fill: ${({ theme }) => theme.colors.text};\n        }\n\n        & > path {\n            opacity: 0.5;\n            transition: opacity .5s, fill .5s;\n        }\n        &.active > path {\n            opacity: 1;\n        }\n    }\n\n\n`;\n\nconst Navigation = () => {\n    const { theme, setTheme } = useContext(ThemeContext);\n    const [enabled] = useDarkModeEnable();\n    const isHome = useRouteMatch({\n        path: '/',\n        exact: true,\n    });\n\n    return <Sticky enabled={true} top={0} bottomBoundary={1200} innerZ={1}>\n        <NavigationWrapper className={c({ 'hide-top': !!isHome })}>\n            <div className=\"title\">\n                <Link to=\"/\">xantiagoma</Link>\n            </div>\n            <ul className=\"urls\">\n                <li><Link to=\"/blog\">Blog</Link></li>\n            </ul>\n            <div className=\"theme-switcher\">\n                {\n                    [\n                        'light',\n                        enabled && 'system',\n                        'dark',\n                    ].filter(e => e).map(themeKey =>\n                        <ThemeButtonWrapper key={themeKey} onClick={() => setTheme(themeKey)}>\n                            <Icon path={mapThemeKeyToIcon[themeKey]}\n                                title={mapThemeKeyToText[themeKey]}\n                                size=\"25px\"\n                                className={c('icon', { 'active': theme === themeKey })}\n                                color=\"\"\n                            />\n                        </ThemeButtonWrapper>\n\n                    )\n                }\n            </div>\n        </NavigationWrapper>\n    </Sticky>;\n}\n\nexport default Navigation;","import produce from \"immer\"\nimport { mapValues } from \"lodash\";\n\nconst breakpoints = {\n    xs: 30,\n    sm: 48,\n    md: 64,\n    lg: 75\n};\n\nconst mediaqueries = mapValues(breakpoints,\n    bp => `@media only screen and (min-width: ${bp}em)`\n)\n\nconst base = {\n    name: 'base',\n    colors: {\n        primary: 'hotpink',\n        background: '#000000',\n    },\n    sizes: {\n        navbar: {\n            height: '50px',\n        }\n    },\n    mediaqueries\n}\n\nconst light = produce(base, draft => {\n    draft.name = \"light\";\n    draft.colors.background = \"#e8eaf3\";\n    draft.colors.container = \"#F5F6FA\";\n    draft.colors.navbar = \"#FFFFFF\";\n    draft.colors.text = \"#0E0E0E\";\n});\n\nconst dark = produce(base, draft => {\n    draft.name = \"dark\";\n    draft.colors.background = '#070706';\n    draft.colors.container = \"#0E0E0E\";\n    draft.colors.navbar = \"#000000\";\n    draft.colors.text = \"#F5F6FA\";\n});\n\nexport {\n    light,\n    dark,\n    mediaqueries\n}","import React from 'react';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport { Blog, Home } from \"./pages\";\nimport { GlobalStyles, Navigation } from \"./components\";\nimport { useLocalStorage } from \"react-use\";\nimport { ThemeProvider } from 'emotion-theming';\nimport { ThemeContext } from \"./context\";\nimport * as themes from './theme';\nimport { useDarkModeEnable } from './hooks';\n\nconst getTheme = theme => themes[theme] || themes.light;\n\nconst App = () => {\n  const [themeKey, themeKeySet] = useLocalStorage('theme', 'system');\n  const [enabled, systemTheme] = useDarkModeEnable();\n  const theme = (themeKey === \"system\") ?\n    (\n      enabled ? getTheme(systemTheme) : getTheme('light')\n    )\n    : getTheme(themeKey);\n\n  return (\n    <ThemeContext.Provider value={{ theme: themeKey, setTheme: themeKeySet }}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyles />\n        <Router>\n          <Navigation />\n          <Route component={Home} path=\"/\" exact />\n          <Route component={Blog} path=\"/blog\" />\n        </Router>\n      </ThemeProvider>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport \"react-aspect-ratio/aspect-ratio.css\";\nimport \"flexboxgrid\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}