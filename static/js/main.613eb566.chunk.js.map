{"version":3,"sources":["pages/Blog.js","pages/Home.js","components/GlobalStyles.js","context/ThemeContext.js","hooks/index.js","components/Navigation.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["Blog","match","history","HomeWrapper","styled","div","theme","sizes","navbar","height","Home","width","useWindowSize","className","ratio","style","maxWidth","photoId","expand","GlobalStyles","props","useTheme","styles","css","colors","background","text","ThemeContext","createContext","setTheme","useDarkModeEnable","useState","state","stateSet","handler","window","matchMedia","matches","useEffect","addEventListener","NavigationWrapper","nav","Navigation","useContext","enabled","isHome","useRouteMatch","path","exact","top","bottomBoundary","innerZ","c","to","value","onChange","event","target","filter","e","map","op","key","base","name","primary","light","produce","draft","dark","getTheme","themes","App","useLocalStorage","themeKey","themeKeySet","systemTheme","Provider","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.613eb566.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Blog = ({ match, history }) => {\n  return (\n    <>\n      Under contruction <br />\n      {/* <div>\n          <Link to={`${match.url}/invoices`}>Invoices</Link>\n          <Link to={`${match.url}/team`}>Team</Link>\n        </div> */}\n      {/* <div>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/about\">About</Link>\n          <Link to=\"/support\">Support</Link>\n          <button onClick={history.goBack}>Go Back</button>\n        </div> */}\n    </>\n  );\n}\n\nexport default Blog;","import React from \"react\";\nimport AspectRatio from \"react-aspect-ratio\";\nimport { useWindowSize } from \"react-use\";\nimport Unsplash from 'react-unsplash-wrapper'\nimport styled from \"@emotion/styled\";\n\n\nconst HomeWrapper = styled.div`\n    .hero {\n        position: relative;\n        top: -${({ theme }) => theme.sizes.navbar.height};\n    }\n\n    .hero-ratio > div::before {\n        background: linear-gradient( rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5) );\n        position: relative;\n        content: \"\";\n        width: 100%;\n        height: 100%;\n    }\n\n`;\n\nconst Home = () => {\n    const { width } = useWindowSize()\n    return (<HomeWrapper>\n        <div className=\"hero\">\n            <AspectRatio\n                ratio={16 / 9}\n                style={{\n                    maxWidth: `${width}px`,\n                }}\n                className=\"hero-ratio\"\n            >\n                <Unsplash photoId=\"gy08FXeM2L4\" expand />\n            </AspectRatio>\n        </div>\n    </HomeWrapper>);\n}\n\nexport default Home;\n","import React from 'react';\nimport { useTheme } from 'emotion-theming';\nimport { css, Global } from '@emotion/core';\n\n\n\n\nconst globalStyles = props => css`\n  body {\n    background: ${props.theme.colors.background};\n    color:  ${props.theme.colors.text};\n  }\n\n  a {\n    color: inherit;\n    text-decoration: none;\n  }\n`;\n\nconst GlobalStyles = () => {\n  const theme = useTheme();\n  return <Global styles={globalStyles({ theme })} />;\n}\n\nexport default GlobalStyles;","import { createContext } from \"react\";\n\nconst ThemeContext = createContext({\n    theme: 'system',\n    setTheme: () => { },\n});\n\nexport default ThemeContext;","import { useState, useEffect } from 'react';\n\nexport function useDarkModeEnable() {\n    const [state, stateSet] = useState([false]);\n\n    const handler = () => {\n        if (window.matchMedia) {\n            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                return [true, 'dark'];\n            } else {\n                return [true, 'light'];\n            }\n        } else {\n            return [false];\n        }\n    }\n\n    useEffect(() => {\n        stateSet(handler());\n        window.matchMedia &&\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener &&\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => stateSet(handler()));\n    }, []);\n\n    return state;\n}","import React, { useContext } from 'react';\nimport styled from '@emotion/styled';\nimport Sticky from 'react-stickynode';\nimport { ThemeContext } from \"../context\";\nimport { useDarkModeEnable } from '../hooks';\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport c from \"classnames\";\n\n\nconst NavigationWrapper = styled.nav`\n    display: flex;\n    background: ${({ theme }) => theme.colors.navbar};\n    height: ${({ theme }) => theme.sizes.navbar.height};\n    transition: color 1s, background 1s;\n\n    &.hide-top {\n        background: transparent;\n        color: white;\n\n        .active & {\n            background: ${({ theme }) => theme.colors.navbar};\n            color: inherit;\n        }\n    }\n\n    .title {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 1rem;\n    }\n\n    h1 {\n        margin: 0\n    }\n\n    .urls {\n        display: block;\n        margin-right: auto;\n        padding: 0;\n\n        li {\n        display: inline-block;\n\n        a {\n            margin-right: 1rem;\n        }\n        }\n    }\n`;\n\nconst Navigation = () => {\n    const { theme, setTheme } = useContext(ThemeContext);\n    const [enabled] = useDarkModeEnable();\n    const isHome = useRouteMatch({\n        path: '/',\n        exact: true,\n    });\n\n    return <Sticky enabled={true} top={0} bottomBoundary={1200} innerZ={1}>\n        <NavigationWrapper className={c({ 'hide-top': !!isHome })}>\n            <div className=\"title\">\n                <Link to=\"/\">xantiagoma</Link>\n            </div>\n            <ul className=\"urls\">\n                <li><Link to=\"/blog\">Blog</Link></li>\n            </ul>\n            <div className=\"theme-switcher\">\n                <select value={theme} onChange={event => setTheme(event.target.value)}>\n                    {\n                        [\n                            'light',\n                            'dark',\n                            enabled && 'system',\n                        ].filter(e => e).map(op => <option key={op} value={op}>{op}</option>)\n                    }\n                </select>\n            </div>\n        </NavigationWrapper>\n    </Sticky>;\n}\n\nexport default Navigation;","import produce from \"immer\"\n\nconst base = {\n    name: 'base',\n    colors: {\n        primary: 'hotpink',\n        background: '#000000'\n    },\n    sizes: {\n        navbar: {\n            height: '50px',\n        }\n    }\n}\n\nconst light = produce(base, draft => {\n    draft.name = \"light\";\n    draft.colors.background = \"#F5F6FA\";\n    draft.colors.text = \"#0E0E0E\";\n    draft.colors.navbar = \"#FFFFFF\";\n});\n\nconst dark = produce(base, draft => {\n    draft.name = \"dark\";\n    draft.colors.background = \"#0E0E0E\";\n    draft.colors.text = \"#F5F6FA\";\n    draft.colors.navbar = \"#000000\";\n});\n\nexport {\n    light,\n    dark\n}","import React from 'react';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport { Blog, Home } from \"./pages\";\nimport { GlobalStyles, Navigation } from \"./components\";\nimport { useLocalStorage } from \"react-use\";\nimport { ThemeProvider } from 'emotion-theming';\nimport { ThemeContext } from \"./context\";\nimport * as themes from './theme';\nimport { useDarkModeEnable } from './hooks';\n\nconst getTheme = theme => themes[theme] || themes.light;\n\nconst App = () => {\n  const [themeKey, themeKeySet] = useLocalStorage('theme', 'system');\n  const [enabled, systemTheme] = useDarkModeEnable();\n  const theme = (themeKey === \"system\") ?\n    (\n      enabled ? getTheme(systemTheme) : getTheme('light')\n    )\n    : getTheme(themeKey);\n\n  return (\n    <ThemeContext.Provider value={{ theme: themeKey, setTheme: themeKeySet }}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyles />\n        <Router>\n          <Navigation />\n          <Route component={Home} path=\"/\" exact />\n          <Route component={Blog} path=\"/blog\" />\n        </Router>\n      </ThemeProvider>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport \"react-aspect-ratio/aspect-ratio.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}